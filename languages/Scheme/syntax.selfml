(root source.scheme
    (include @comment)
    (include @sexp)
    (include @string)
    (include @language-functions)
    (include @quote)
    (include @illegal))

(collection quote
    (zone
        (subzones
            (zone constant.other.symbol.scheme
                (match
                    (regex [(?x)
						(')\s*
						([[:alnum:]][[:alnum:]!$%&*+-./:<=>?@^_~]*)
					]
                        (1 punctuation.section.quoted.symbol.scheme))))
            (zone constant.other.empty-list.schem
                (match
                    (regex [(?x)
						(')\s*
						((\()\s*(\)))
					]
                        (3 punctuation.section.expression.begin.scheme)
                        (4 punctuation.section.expression.end.scheme)
                        (1 punctuation.section.quoted.empty-list.scheme)
                        (2 meta.expression.scheme))))
            (zone string.other.quoted-object.scheme
                (start
                    (regex [(')\s*]
                        (1 punctuation.section.quoted.scheme)))
                (end
                    (regex [(?=[\s()])|(?<=\n)]))
                (subzones
                    (include @quoted))))))

(collection illegal
    (zone invalid.illegal.parenthesis.scheme
        (match
            (regex [[()\[\]]]))))

(collection quoted
    (include @string)
    (zone meta.expression.scheme
        (start
            (regex [(\()]
                (1 punctuation.section.expression.begin.scheme)))
        (end
            (regex [(\))]
                (1 punctuation.section.expression.end.scheme)))
        (subzones
            (include @quoted)))
    (include @quote)
    (include @illegal))

(collection string
    (zone string.quoted.double.scheme
        (start
            (regex [(")]
                (1 punctuation.definition.string.begin.scheme)))
        (end
            (regex [(")]
                (1 punctuation.definition.string.end.scheme)))
        (subzones
            (zone constant.character.escape.scheme
                (match
                    (regex \\.))))))

(collection quote-sexp
    (zone
        (inner-identifier string.other.quote.scheme)
        (start
            (regex [(?<=\()\s*(quote)\b\s*]
                (1 keyword.control.quote.scheme)))
        (end
            (regex [(?=[\s)])|(?<=\n)]))
        (subzones
            (include @quoted))))

(collection language-functions
    (zone keyword.control.scheme
        (match
            (regex `(?x)
						(?<=(\s|\(|\[)) # preceded by space or ( 
						( do|or|and|else|quasiquote|begin|if|case|set!|
						  cond|let|unquote|define|let\*|unquote-splicing|delay|
						  letrec)
						(?=(\s|\())`)))
    (zone support.function.boolean-test.scheme
        (match
            (regex [(?x)
						(?<=(\s|\()) # preceded by space or (
						( char-alphabetic|char-lower-case|char-numeric|
						  char-ready|char-upper-case|char-whitespace|
						  (?:char|string)(?:-ci)?(?:=|<=?|>=?)|
						  atom|boolean|bound-identifier=|char|complex|
						  identifier|integer|symbol|free-identifier=|inexact|
						  eof-object|exact|list|(?:input|output)-port|pair|
						  real|rational|zero|vector|negative|odd|null|string|
						  eq|equal|eqv|even|number|positive|procedure
						)
						(\?)		# name ends with ? sign
						(?=(\s|\()) # followed by space or (
					])))
    (zone support.function.convert-type.scheme
        (match
            (regex [(?x)
						(?<=(\s|\()) # preceded by space or (
						( char->integer|exact->inexact|inexact->exact|
						  integer->char|symbol->string|list->vector|
						  list->string|identifier->symbol|vector->list|
						  string->list|string->number|string->symbol|
						  number->string
						)
						(?=(\s|\()) # followed by space or (					
					])))
    (zone support.function.with-side-effects.scheme
        (match
            (regex [(?x)
						(?<=(\s|\()) # preceded by space or (
						( set-(?:car|cdr)|				 # set car/cdr
						  (?:vector|string)-(?:fill|set) # fill/set string/vector
						)
						(!)			# name ends with ! sign
						(?=(\s|\()) # followed by space or (
					])))
    (zone keyword.operator.arithmetic.scheme
        (match
            (regex [(?x)
						(?<=(\s|\()) # preceded by space or (
						( >=?|<=?|=|[*/+-])
						(?=(\s|\()) # followed by space or (
						])))
    (zone support.function.general.scheme
        (match
            (regex [(?x)
						(?<=(\s|\()) # preceded by space or (
						( append|apply|approximate|
						  call-with-current-continuation|call/cc|catch|
						  construct-identifier|define-syntax|display|foo|
						  for-each|force|cd|gen-counter|gen-loser|
						  generate-identifier|last-pair|length|let-syntax|
						  letrec-syntax|list|list-ref|list-tail|load|log|
						  macro|magnitude|map|map-streams|max|member|memq|
						  memv|min|newline|nil|not|peek-char|rationalize|
						  read|read-char|return|reverse|sequence|substring|
						  syntax|syntax-rules|transcript-off|transcript-on|
						  truncate|unwrap-syntax|values-list|write|write-char|
						  
						  # cons, car, cdr, etc
						  cons|c(a|d){1,4}r| 
                          
						  # unary math operators
						  abs|acos|angle|asin|assoc|assq|assv|atan|ceiling|
						  cos|floor|round|sin|sqrt|tan|
						  (?:real|imag)-part|numerator|denominator
                          
						  # other math operators
						  modulo|exp|expt|remainder|quotient|lcm|
                          
						  # ports / files
						  call-with-(?:input|output)-file|
						  (?:close|current)-(?:input|output)-port|
						  with-(?:input|output)-from-file|
						  open-(?:input|output)-file|
						  
						  # char-«foo»
						  char-(?:downcase|upcase|ready)|
						  
						  # make-«foo»
						  make-(?:polar|promise|rectangular|string|vector)
						  
						  # string-«foo», vector-«foo»
						  string(?:-(?:append|copy|length|ref))?|
						  vector(?:-length|-ref)
						)
						(?=(\s|\()) # followed by space or (
					]))))

(collection sexp
    (zone meta.expression.scheme
        (start
            (regex [(\()]
                (1 punctuation.section.expression.begin.scheme)))
        (end
            (regex [(\))(\n)?]
                (1 punctuation.section.expression.end.scheme)
                (2 meta.after-expression.scheme)))
        (subzones
            (include @comment)
            (zone meta.declaration.procedure.scheme
                (start
                    (regex [(?x)
						(?<=\()       # preceded by (
						(define)\s+   # define
						(\()          # list of parameters
						  ([[:alnum:]][[:alnum:]!$%&*+-./:<=>?@^_~]*)
						  ((\s+
						    ([[:alnum:]][[:alnum:]!$%&*+-./:<=>?@^_~]*|[._])
						   )*
						  )\s*
						(\))
					]
                        (7 punctuation.definition.function.scheme)
                        (3 entity.name.function.scheme)
                        (4 variable.parameter.function.scheme)
                        (1 keyword.control.scheme)
                        (2 punctuation.definition.function.scheme)))
                (end
                    (regex [(?=\))]
                        (7 punctuation.definition.function.scheme)
                        (3 entity.name.function.scheme)
                        (4 variable.parameter.function.scheme)
                        (1 keyword.control.scheme)
                        (2 punctuation.definition.function.scheme)))
                (subzones
                    (include @comment)
                    (include @sexp)
                    (include @illegal)))
            (zone meta.declaration.procedure.scheme
                (start
                    (regex [(?x)
						(?<=\() # preceded by (
						(lambda)\s+
						(\() # opening paren
						((?:
						  ([[:alnum:]][[:alnum:]!$%&*+-./:<=>?@^_~]*|[._])
						  \s+
						)*(?:
						  ([[:alnum:]][[:alnum:]!$%&*+-./:<=>?@^_~]*|[._])
						)?)
						(\)) # closing paren
					]
                        (3 variable.parameter.scheme)
                        (1 keyword.control.scheme)
                        (6 punctuation.definition.variable.scheme)
                        (2 punctuation.definition.variable.scheme)))
                (end
                    (regex [(?=\))]
                        (3 variable.parameter.scheme)
                        (1 keyword.control.scheme)
                        (6 punctuation.definition.variable.scheme)
                        (2 punctuation.definition.variable.scheme)))
                (subzones
                    (include @comment)
                    (include @sexp)
                    (include @illegal)))
            (zone meta.declaration.variable.scheme
                (start
                    (regex [(?<=\()(define)\s([[:alnum:]][[:alnum:]!$%&*+-./:<=>?@^_~]*)\s*.*?]
                        (1 keyword.control.scheme)
                        (2 variable.other.scheme)))
                (end
                    (regex [(?=\))]
                        (1 keyword.control.scheme)
                        (2 variable.other.scheme)))
                (subzones
                    (include @comment)
                    (include @sexp)
                    (include @illegal)))
            (include @quote-sexp)
            (include @quote)
            (include @language-functions)
            (include @string)
            (include @constants)
            (zone constant.character.named.scheme
                (match
                    (regex [(?<=[\(\s])(#\\)(space|newline|tab)(?=[\s\)])])))
            (zone constant.character.hex-literal.scheme
                (match
                    (regex [(?<=[\(\s])(#\\)x[0-9A-F]{2,4}(?=[\s\)])])))
            (zone constant.character.escape.scheme
                (match
                    (regex [(?<=[\(\s])(#\\).(?=[\s\)])])))
            (zone punctuation.separator.cons.scheme
                (match
                    (regex [(?<=[ ()])\.(?=[ ()])])))
            (include @sexp)
            (include @illegal))))

(collection comment
    (zone comment.line.semicolon.scheme
        (match
            (regex [(;).*$\n?]
                (1 punctuation.definition.comment.scheme)))))

(collection constants
    (zone constant.language.boolean.scheme
        (match
            (regex [#[t|f]])))
    (zone constant.numeric.scheme
        (match
            (regex [(?<=[\(\s])((#e|#i)?[0-9]+(\.[0-9]+)?|(#x)[0-9a-fA-F]+|(#o)[0-7]+|(#b)[01]+)(?=[\s;()'",\[\]])]))))